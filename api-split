// Room creation using CSV File
// else if (attachments && attachments[0].name.match("csv") && streamType == 'IM') {
//     let attachmentName = data[0].payload.messageSent.message.attachments.name
//     console.log("Detected CSV file upload.  Creating room using CSV file.")
//     let csvUser = [];
//     let csvUserBad = [];
//
//     // Retrieve CSV file attachment
//     try {
//         let file = await api.message.v1.attachment(streamId, messageId, attachments[0].id)
//         file = atob(file)
//
//         //Lets process the CSV file
//         csv
//             .fromString(file, {
//                 headers: true
//             })
//             .validate(function(data) {
//                 //Validate each row of CSV into an Array
//                 console.log('Validating emailAddress value: ' + data.emailAddress);
//
//                 if (emailRegex.test(data.emailAddress))
//                     return true;
//                 else
//                     return false;
//             })
//             .on("data", function(data) {
//                 //Add each row of CSV into an Array
//                 csvUser.push(data);
//             })
//             .on("data-invalid", function(data) {
//                 //Add each bad row of CSV into an Array
//                 csvUserBad.push(data.emailAddress);
//                 console.log("Bad CSV row: " + data.emailAddress);
//                 return
//             })
//             .on("end", async function() {
//                 console.log("Processed CSV File");
//
//                 //Create Room with name from message
//                 let template = `<messageML><div>`
//                 let roomName = message
//                 if (roomName && (csvUser.length > 0)) {
//                     let roomID
//                     try {
//                         api.message.v4.send(streamId, '<messageML>Attempting to create chat room <b>' + roomName + '</b></messageML>')
//                         // create room
//                         try {
//                             console.log("RoomName: " + roomName)
//                             roomID = await api.room.v3.create(roomName, "Created by Roombot", [{
//                                 "key": "roombot",
//                                 "value": "csv"
//                             }], false, true, false, false, false, false, true)
//                             console.log(roomID)
//                         } catch (err) {
//                             console.log(err)
//                             api.message.v4.send(streamId, '<messageML><span class="tempo-text-color--red"><b>Error:</b> The name <b>' + roomName + '</b> is too similar to one that is already in use. Please choose another name.</span></messageML>')
//                             return
//                         }
//                         // Promote bot initiator as owner of the room
//                         await api.room.addMember(roomID.roomSystemInfo.id, userId)
//                         await api.room.promoteOwner(roomID.roomSystemInfo.id, userId)
//
//                         // Loop through CSV file users to obtain userID
//                         let unknownUser = [];
//                         for (var i = 0; i < csvUser.length; i++) {
//                             var csvmember = csvUser[i];
//
//                             // Lookup userID from mail value
//                             try {
//                                 console.log("Look up userId for: " + csvmember.emailAddress);
//                                 const memberUserId = await api.user.lookup({
//                                     email: csvmember.emailAddress
//                                 })
//                                 // Add user to the chat room
//                                 if (memberUserId) {
//                                     await api.room.addMember(roomID.roomSystemInfo.id, memberUserId.id)
//                                     console.log("Symphony User has been added to the room: " + memberUserId.id)
//
//                                     // Promote userID to chat room owner if required
//                                     if (csvmember.memberType === "owner") {
//                                         await api.room.promoteOwner(roomID.roomSystemInfo.id, memberUserId.id)
//                                     } else {
//                                         console.log("User does not need to be promoted as room owner: " + csvmember.emailAddress);
//                                     }
//                                 } else {
//                                     //Error adding user to the room
//                                     unknownUser.push(csvmember.emailAddress);
//                                     console.log("There was an error adding this user to the room: " + csvmember.emailAddress)
//                                     //console.log(unknownUser)
//                                 }
//                             } catch (err) {
//                                 console.log('Lookup failed for ' + csvmember.emailAddress + ' the user email value does not exist in Symphony.')
//                                 break;
//                             }
//                         }
//
//                         console.log('Unknown User count: ' + unknownUser.length)
//                         console.log('Valid EmailAddress count: ' + csvUser.length)
//                         console.log('Bad emailAddress count: ' + csvUserBad.length)
//
//                         // Response after room creation & Unknown Symphony Users & Malformed Emails
//                         if ((unknownUser.length > 0) && (csvUserBad.length > 0)) {
//                             let roomMemberCount = csvUser.length - unknownUser.length
//                             template = `<messageML><div>`
//                             template += `
//                                 <card accent="tempo-bg-color--theme-accent" iconSrc="https://sup-lab.symphony.com/vinay/c4af4e637d41970201bd5de34142e942.png">
//                                 <header><span class="tempo-text-color--theme-accent"><b>Room Provisioning Report - Completed But with Errors</b></span></header>
//                                 <body>
//                                   <br></br>
//                                   <p>Your room <span class="tempo-text-color--theme-accent"><b>${roomName}</b></span> was created successfully however some of the users could not be added to the room.</p>\n\n
//                                   <br></br>
//                                   <p><span class="tempo-text-color--theme-accent"><b>Room Members</b></span></p>
//                                   <p>We added <span class="tempo-text-color--theme-accent"><b> ${roomMemberCount} </b></span> user(s) to the room.</p>\n\n
//                                   <br></br>
//                                   <p><span class="tempo-text-color--theme-accent"><b>Unknown Users</b></span></p>
//                                   <p>The following <span class="tempo-text-color--theme-accent"><b>${unknownUser.length}</b></span> user(s) were not added to the room.  It could be due to them not being enabled on Symphony, or not being enabled for External communications::</p>
//                                   <p>${unknownUser.join('\r\n')}</p>
//                                   <br></br>
//                                   <p><span class="tempo-text-color--theme-accent"><b>Malformed Email Addresses</b></span></p>
//                                   <p>The following <span class="tempo-text-color--theme-accent"><b>${csvUserBad.length}</b></span> email addresses are malformed:</p>
//                                   <p>${csvUserBad.join('\r\n')}</p>
//                               `
//                             template += '</body></card></div></messageML>'
//                             template = template.replace(/&/g, 'and')
//                             api.message.v4.send(streamId, template)
//
//                             // Response after room creation & Unknown Symphony Users
//                         } else if ((unknownUser.length > 0) && (csvUserBad.length <= 0)) {
//                             //console.log(unknownUser.length)
//                             let roomMemberCount = csvUser.length - unknownUser.length
//                             template = `<messageML><div>`
//                             template += `
//                                       <card accent="tempo-bg-color--theme-accent" iconSrc="https://sup-lab.symphony.com/vinay/c4af4e637d41970201bd5de34142e942.png">
//                                       <header><span class="tempo-text-color--theme-accent"><b>Room Provisioning Report - Completed But with Errors</b></span></header>
//                                       <body>
//                                         <br></br>
//                                         <p>Your room <span class="tempo-text-color--theme-accent"><b>${roomName}</b></span> was created successfully however some of the users could not be added to the room.</p>\n\n
//                                         <br></br>
//                                         <p><span class="tempo-text-color--theme-accent"><b>Room Members</b></span></p>
//                                         <p>We added <span class="tempo-text-color--theme-accent"><b> ${roomMemberCount} </b></span> user(s) to the room.</p>\n\n
//                                         <br></br>
//                                         <p><span class="tempo-text-color--theme-accent"><b>Unknown Users</b></span></p>
//                                         <p>The following <span class="tempo-text-color--theme-accent"><b>${unknownUser.length}</b></span> user(s) were not added to the room.  It could be due to them not being enabled on Symphony, or not being enabled for External communications:</p>
//                                         <p>${unknownUser.join('\r\n')}</p>
//                                         <br></br>
//                                     `
//                             template += '</body></card></div></messageML>'
//                             template = template.replace(/&/g, 'and')
//                             api.message.v4.send(streamId, template)
//
//                             // Response after room creation & Malformed Emails
//                         } else if ((unknownUser.length <= 0) && (csvUserBad.length > 0)) {
//                             let roomMemberCount = csvUser.length - unknownUser.length
//                             template = `<messageML><div>`
//                             template += `
//                                             <card accent="tempo-bg-color--theme-accent" iconSrc="https://sup-lab.symphony.com/vinay/c4af4e637d41970201bd5de34142e942.png">
//                                             <header><span class="tempo-text-color--theme-accent"><b>Room Provisioning Report - Completed But with Errors</b></span></header>
//                                             <body>
//                                               <br></br>
//                                               <p>Your room <span class="tempo-text-color--theme-accent"><b>${roomName}</b></span> was created successfully however some of the users could not be added to the room.</p>\n\n
//                                               <br></br>
//                                               <p><span class="tempo-text-color--theme-accent"><b>Room Members</b></span></p>
//                                               <p>We added <span class="tempo-text-color--theme-accent"><b> ${roomMemberCount} </b></span> user(s) to the room.</p>\n\n
//                                               <br></br>
//                                               <p><span class="tempo-text-color--theme-accent"><b>Malformed Email Addresses</b></span></p>
//                                               <p>The following <span class="tempo-text-color--theme-accent"><b>${csvUserBad.length}</b></span> email addresses are malformed:</p>
//                                               <p>${csvUserBad.join('\r\n')}</p>
//                                               <br></br>
//                                           `
//                             template += '</body></card></div></messageML>'
//                             template = template.replace(/&/g, 'and')
//                             api.message.v4.send(streamId, template)
//                         } else {
//                             // Response after room creation & No errors
//                             template = `<messageML><div>`
//                             template += `
//                               <card accent="tempo-bg-color--theme-accent" iconSrc="https://sup-lab.symphony.com/vinay/c4af4e637d41970201bd5de34142e942.png">
//                               <header><span class="tempo-text-color--theme-accent"><b>Room Provisioning Report - Completed Successfully</b></span></header>
//                               <body>
//                                 <br></br>
//                                 <p>Your room <span class="tempo-text-color--theme-accent"><b>${roomName}</b></span> was created successfully.</p>\n\n
//                                 <br></br>
//                                 <p><span class="tempo-text-color--theme-accent"><b>Room Members</b></span></p>
//                                 <p>We added <span class="tempo-text-color--theme-accent"><b>${csvUser.length}</b></span> user(s) to the room.</p>
//                             `
//                             template += '</body></card></div></messageML>'
//                             template = template.replace(/&/g, 'and')
//                             api.message.v4.send(streamId, template)
//                         }
//                         //Clear out Array
//                         csvUser.length = 0;
//                         csvUserBad.length = 0;
//                         unknownUser.length = 0;
//
//                     } catch (err) {
//                         //If we hit a failure condition when creating the chat room
//                         api.message.v4.send(streamId, '<messageML><span class="tempo-text-color--red"><b>Error:</b> Could not create room <b>' + roomName + '</b><br></br>' + err.message + '</span></messageML>')
//                         console.log("There was an error creating the room.")
//                         console.log(err)
//                         return
//                     }
//                 }
//             });
//     } catch (err) {
//         console.log(err)
//         api.message.v4.send(streamId, '<messageML><span class="tempo-text-color--red"><b>Error:</b> There was an issue accessing the CSV file.  Please try again.<br></br>' + err.message + '</span></messageML>')
//         return
//     }
// }

// Room creation using EML File
// else if (attachments && attachments[0].name.match("eml") && streamType == 'IM') {
//     let attachmentName = data[0].payload.messageSent.message.attachments.name
//     console.log("Detected EML file upload.  Creating room using EML file.")
//     let emlMember = [];
//     //let csvUserBad = [];
//
//     // Retrieve EML file attachment
//     try {
//         let eml = await api.message.v1.attachment(streamId, messageId, attachments[0].id)
//         eml = atob(eml)
//
//         // Read EML file
//         var mailparser = new MailParser();
//         mailparser.write(eml);
//         mailparser.end();
//         mailparser.on("end", async function(email) {
//             // console.log("From :", email.headers.from);
//             // console.log("To :", email.headers.to);
//             // console.log("CC :", email.headers.cc);
//             // console.log("Subject:", email.subject);
//             // console.log("Text body:", email.text);
//             console.log("Processed EML File");
//
//             // Concatenate Email headers to obtain Email Addresses
//             var headers = email.headers.from + " " + email.headers.to + " " + email.headers.cc
//             console.log(headers)
//
//             // Add email participants to Array
//             var regex = /(<[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+>)/gi
//             var match;
//             console.log("running matches")
//             while (match = regex.exec(headers)) {
//
//                 // Remove them horrible < > signs
//                 match[1] = match[1].replace(/</, '').replace(/>/, '')
//                 emlMember.push(match[1]);
//             }
//             console.log("Members :" + emlMember)
//
//             let roomName = message
//             console.log("EML Room Name: " + roomName)
//
//             // Lets start the magic with Email
//             if (roomName && (emlMember.length > 0)) {
//                 let roomID
//                 try {
//                     api.message.v4.send(streamId, '<messageML>Attempting to create chat room <b>' + roomName + '</b></messageML>')
//                     // create room
//                     try {
//                         console.log("RoomName: " + roomName)
//                         roomID = await api.room.v3.create(roomName, "Created by Roombot", [{
//                             "key": "roombot",
//                             "value": "eml"
//                         }], false, true, false, false, false, false, true)
//                         console.log(roomID)
//                     } catch (err) {
//                         console.log(err)
//                         api.message.v4.send(streamId, '<messageML><span class="tempo-text-color--red"><b>Error:</b> The name <b>' + roomName + '</b> is too similar to one that is already in use. Please choose another name.</span></messageML>')
//                         return
//                     }
//                     // Promote bot initiator as owner of the room
//                     await api.room.addMember(roomID.roomSystemInfo.id, userId)
//                     await api.room.promoteOwner(roomID.roomSystemInfo.id, userId)
//
//                     // Define header variables for email and push email context into newly created room
//                     var body = email.text.replace(/</g, '').replace(/>/g, '').split(/\r\n|\r|\n/gm)
//
//                     if (email.headers.cc) {
//                         template = `<messageML><div>`
//                         template += `
//                           <card accent="tempo-bg-color--theme-accent" iconSrc="https://sup-lab.symphony.com/vinay/email_PNG37.png">
//                           <header><span class="tempo-text-color--theme-accent"><b>${email.subject}</b></span></header>
//                           <body>
//                             <br></br>
//                             <p><span class="tempo-text-color--theme-primary">From: ${email.headers.from.replace(/</g, '').replace(/>/g, '')}</span></p>\n\n
//                             <p><span class="tempo-text-color--theme-primary">To: ${email.headers.to.replace(/</g, '').replace(/>/g, '').replace(/,/g,' ')}</span></p>\n\n
//                             <p><span class="tempo-text-color--theme-primary">Cc: ${email.headers.cc.replace(/</g, '').replace(/>/g, '').replace(/,/g,' ')}</span></p>\n\n
//                             <br></br>
//                             <p><span class="tempo-text-color--theme-accent">On: ${email.headers.date.replace(/,/,' ')}</span></p>\n\n
//                             <br></br>
//                             <p>${body}</p>
//                         `
//                         template += '</body></card></div></messageML>'
//                         template = template.replace(/&/g, 'and')
//                         template = template.replace(/,,/gm, '<br></br>')
//                         template = template.replace(/,/gm, '<p></p>')
//                         //console.log(template)
//                         api.message.v4.send(roomID.roomSystemInfo.id, template)
//
//                     } else {
//                         template = `<messageML><div>`
//                         template += `
//                           <card accent="tempo-bg-color--theme-accent" iconSrc="https://sup-lab.symphony.com/vinay/email_PNG37.png">
//                           <header><span class="tempo-text-color--theme-accent"><b>${email.subject}</b></span></header>
//                           <body>
//                             <br></br>
//                             <p><span class="tempo-text-color--theme-primary">From: ${email.headers.from.replace(/</g, '').replace(/>/g, '')}</span></p>\n\n
//                             <p><span class="tempo-text-color--theme-primary">To: ${email.headers.to.replace(/</g, '').replace(/>/g, '').replace(/,/g,' ')}</span></p>\n\n
//                             <br></br>
//                             <p><span class="tempo-text-color--theme-accent">On: ${email.headers.date.replace(/,/,' ')}</span></p>\n\n
//                             <br></br>
//                             <p>${body}</p>
//                         `
//                         template += '</body></card></div></messageML>'
//                         template = template.replace(/&/g, 'and')
//                         template = template.replace(/,,/gm, '<br></br>')
//                         template = template.replace(/,/gm, '<p></p>')
//                         //console.log(template)
//                         api.message.v4.send(roomID.roomSystemInfo.id, template)
//                     }
//
//                     // Loop through EML file users to obtain userID
//                     let unknownUser = [];
//                     for (var i = 0; i < emlMember.length; i++) {
//                         var emailMember = emlMember[i];
//
//                         // Lookup userID from mail value
//                         try {
//                             console.log("Look up userId for: " + emailMember);
//                             const memberUserId = await api.user.lookup({
//                                 email: emailMember
//                             })
//                             // Add user to the chat room
//                             if (memberUserId) {
//                                 await api.room.addMember(roomID.roomSystemInfo.id, memberUserId.id)
//                                 console.log("Symphony User has been added to the room: " + memberUserId.id)
//                             } else {
//                                 //Error adding user to the room
//                                 unknownUser.push(emailMember);
//                                 console.log("There was an error adding this user to the room: " + emailMember)
//                                 //console.log(unknownUser)
//                             }
//                         } catch (err) {
//                             console.log('Lookup failed for ' + emailMember + ' the user email value does not exist in Symphony.')
//                             break;
//                         }
//                     }
//
//                     console.log('Unknown User count: ' + unknownUser.length)
//                     console.log('Email Members count: ' + emlMember.length)
//
//                     // Response after room creation & Unknown Symphony Users & Malformed Emails
//                     let roomMemberCount = emlMember.length - unknownUser.length
//                     if (unknownUser.length > 0) {
//                         template = `<messageML><div>`
//                         template += `
//                             <card accent="tempo-bg-color--theme-accent" iconSrc="https://sup-lab.symphony.com/vinay/c4af4e637d41970201bd5de34142e942.png">
//                             <header><span class="tempo-text-color--theme-accent"><b>Room Provisioning Report - Completed With Errors</b></span></header>
//                             <body>
//                               <br></br>
//                               <p>Your room <span class="tempo-text-color--theme-accent"><b>${roomName}</b></span> was created successfully however some of the users could not be added to the room.</p>\n\n
//                               <br></br>
//                               <p><span class="tempo-text-color--theme-accent"><b>Room Members</b></span></p>
//                               <p>We added <span class="tempo-text-color--theme-accent"><b> ${roomMemberCount} </b></span> user(s) to the room.</p>\n\n
//                               <br></br>
//                               <p><span class="tempo-text-color--theme-accent"><b>Unknown Users</b></span></p>
//                               <p>The following <span class="tempo-text-color--theme-accent"><b>${unknownUser.length}</b></span> user(s) were not added to the room.  It could be due to them not being enabled on Symphony, or not being enabled for External communications:</p>
//                               <p>${unknownUser.join('\r\n')}</p>
//                               <br></br>
//                           `
//                         template += '</body></card></div></messageML>'
//                         template = template.replace(/&/g, 'and')
//                         api.message.v4.send(streamId, template)
//
//                         // Response after room creation & Unknown Symphony Users
//                     } else {
//                         template = `<messageML><div>`
//                         template += `
//                               <card accent="tempo-bg-color--theme-accent" iconSrc="https://sup-lab.symphony.com/vinay/c4af4e637d41970201bd5de34142e942.png">
//                               <header><span class="tempo-text-color--theme-accent"><b>Room Provisioning Report - Completed Successfully</b></span></header>
//                               <body>
//                                 <br></br>
//                                 <p>Your room <span class="tempo-text-color--theme-accent"><b>${roomName}</b></span> was created successfully however some of the users could not be added to the room.</p>\n\n
//                                 <br></br>
//                                 <p><span class="tempo-text-color--theme-accent"><b>Room Members</b></span></p>
//                                 <p>We added <span class="tempo-text-color--theme-accent"><b> ${roomMemberCount} </b></span> user(s) to the room.</p>\n\n
//                                 <br></br>
//                             `
//                         template += '</body></card></div></messageML>'
//                         template = template.replace(/&/g, 'and')
//                         api.message.v4.send(streamId, template)
//                     }
//                     //Clear out Array
//                     emlMember.length = 0;
//                     unknownUser.length = 0;
//                 } catch (err) {
//                     //If we hit a failure condition when creating the chat room
//                     api.message.v4.send(streamId, '<messageML><span class="tempo-text-color--red"><b>Error:</b> Created the room <b>' + roomName + '</b> but there were errors adding the room members.<br></br>' + err.message + '</span></messageML>')
//                     console.log("There was an error adding users to the room.")
//                     console.log(err)
//                     return
//                 }
//             }
//         });
//     } catch (err) {
//         console.log(err)
//         api.message.v4.send(streamId, '<messageML><span class="tempo-text-color--red"><b>Error:</b> There was an issue accessing the EML file.  Please try again.<br></br>' + err.message + '</span></messageML>')
//         return
//     }
// }
